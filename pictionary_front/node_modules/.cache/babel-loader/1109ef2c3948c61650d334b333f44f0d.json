{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst useChat = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        players = _useState4[0],\n        setPlayers = _useState4[1];\n\n  const socketRef = useRef();\n  const token = localStorage.getItem('token');\n  const partyID = localStorage.getItem('partyID');\n  useEffect(() => {\n    socketRef.current = socketIOClient('http://localhost:7001');\n    socketRef.current.on(\"newChatMessage\", ({\n      message\n    }) => {\n      console.log(partyID);\n      setMessages(messages => [message, ...messages]);\n    });\n    socketRef.current.emit(\"new-user\", {\n      partyID,\n      token\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, [token, partyID]);\n\n  const sendMessage = ({\n    message\n  }) => {\n    console.log(message);\n    console.log(partyID);\n    socketRef.current.emit(\"newChatMessage\", {\n      message,\n      token,\n      partyID\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/_useGame.js"],"names":["useEffect","useRef","useState","socketIOClient","useChat","messages","setMessages","players","setPlayers","socketRef","token","localStorage","getItem","partyID","current","on","message","console","log","emit","disconnect","sendMessage"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACcF,QAAQ,CAAC,EAAD,CADtB;AAAA;AAAA,QACXG,QADW;AAAA,QACDC,WADC;;AAAA,qBAEYJ,QAAQ,CAAC,EAAD,CAFpB;AAAA;AAAA,QAEXK,OAFW;AAAA,QAEFC,UAFE;;AAGlB,QAAMC,SAAS,GAAGR,MAAM,EAAxB;AACA,QAAMS,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,OAAO,GAAGF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAhB;AAGAZ,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,SAAS,CAACK,OAAV,GAAoBX,cAAc,CAAC,uBAAD,CAAlC;AAGAM,IAAAA,SAAS,CAACK,OAAV,CAAkBC,EAAlB,CAAqB,gBAArB,EAAuC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgB;AACnDC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAP,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAACW,OAAD,EAAS,GAAGX,QAAZ,CAAb,CAAX;AACH,KAHD;AAKAI,IAAAA,SAAS,CAACK,OAAV,CAAkBK,IAAlB,CAAuB,UAAvB,EAAmC;AAACN,MAAAA,OAAD;AAAUH,MAAAA;AAAV,KAAnC;AAEA,WAAO,MAAM;AACTD,MAAAA,SAAS,CAACK,OAAV,CAAkBM,UAAlB;AAEH,KAHD;AAIH,GAfQ,EAeN,CAACV,KAAD,EAAQG,OAAR,CAfM,CAAT;;AAiBA,QAAMQ,WAAW,GAAG,CAAC;AAACL,IAAAA;AAAD,GAAD,KAAe;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAJ,IAAAA,SAAS,CAACK,OAAV,CAAkBK,IAAlB,CAAuB,gBAAvB,EAAyC;AAACH,MAAAA,OAAD;AAAUN,MAAAA,KAAV;AAAiBG,MAAAA;AAAjB,KAAzC;AACH,GAJD;;AAMA,SAAO;AAACR,IAAAA,QAAD;AAAWgB,IAAAA;AAAX,GAAP;AACH,CAhCD;;AAkCA,eAAejB,OAAf","sourcesContent":["import {useEffect, useRef, useState} from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst useChat = () => {\n    const [messages, setMessages] = useState([]);\n    const [players, setPlayers] = useState([]);\n    const socketRef = useRef();\n    const token = localStorage.getItem('token');\n    const partyID = localStorage.getItem('partyID');\n\n\n    useEffect(() => {\n        socketRef.current = socketIOClient('http://localhost:7001');\n\n\n        socketRef.current.on(\"newChatMessage\", ({ message })=> {\n            console.log(partyID);\n            setMessages(messages => [message,...messages])\n        });\n\n        socketRef.current.emit(\"new-user\", {partyID, token})\n        \n        return () => {\n            socketRef.current.disconnect();\n            \n        };\n    }, [token, partyID])\n\n    const sendMessage = ({message}) => {\n        console.log(message)\n        console.log(partyID)\n        socketRef.current.emit(\"newChatMessage\", {message, token, partyID})\n    }\n\n    return {messages, sendMessage};\n}\n\nexport default useChat;"]},"metadata":{},"sourceType":"module"}