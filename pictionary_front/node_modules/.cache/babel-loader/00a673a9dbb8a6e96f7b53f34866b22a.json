{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst useChat = () => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        messages = _useState2[0],\n        setMessages = _useState2[1];\n\n  const socketRef = useRef();\n  const token = localStorage.getItem('token');\n  const partyID = localStorage.getItem('partyID');\n  console.log(token);\n  console.log(partyID);\n  useEffect(() => {\n    socketRef.current = socketIOClient('http://localhost:7001');\n    socketRef.current.on(\"newChatMessage\", ({\n      message\n    }) => {\n      setMessages(messages => [...messages, message]);\n    });\n    return () => {\n      socketRef.current.disconnect();\n    };\n  }, []);\n\n  const sendMessage = ({\n    message\n  }) => {\n    console.log(message);\n    socketRef.current.emit(\"newChatMessage\", {\n      message,\n      token\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\nexport default useChat;","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/_useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","useChat","messages","setMessages","socketRef","token","localStorage","getItem","partyID","console","log","current","on","message","disconnect","sendMessage","emit"],"mappings":";AAAA,SAAQA,SAAR,EAAmBC,MAAnB,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACcF,QAAQ,CAAC,EAAD,CADtB;AAAA;AAAA,QACXG,QADW;AAAA,QACDC,WADC;;AAElB,QAAMC,SAAS,GAAGN,MAAM,EAAxB;AACA,QAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACA,QAAMC,OAAO,GAAGF,YAAY,CAACC,OAAb,CAAqB,SAArB,CAAhB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,SAAS,CAACO,OAAV,GAAoBX,cAAc,CAAC,uBAAD,CAAlC;AAEAI,IAAAA,SAAS,CAACO,OAAV,CAAkBC,EAAlB,CAAqB,gBAArB,EAAuC,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgB;AACnDV,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcW,OAAd,CAAb,CAAX;AACH,KAFD;AAGA,WAAO,MAAM;AACTT,MAAAA,SAAS,CAACO,OAAV,CAAkBG,UAAlB;AACH,KAFD;AAGH,GATQ,EASN,EATM,CAAT;;AAWA,QAAMC,WAAW,GAAG,CAAC;AAACF,IAAAA;AAAD,GAAD,KAAe;AAC/BJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAT,IAAAA,SAAS,CAACO,OAAV,CAAkBK,IAAlB,CAAuB,gBAAvB,EAAyC;AAACH,MAAAA,OAAD;AAAUR,MAAAA;AAAV,KAAzC;AACH,GAHD;;AAKA,SAAO;AAACH,IAAAA,QAAD;AAAWa,IAAAA;AAAX,GAAP;AACH,CAzBD;;AA2BA,eAAed,OAAf","sourcesContent":["import {useEffect, useRef, useState} from \"react\";\nimport socketIOClient from \"socket.io-client\";\n\nconst useChat = () => {\n    const [messages, setMessages] = useState([]);\n    const socketRef = useRef();\n    const token = localStorage.getItem('token');\n    const partyID = localStorage.getItem('partyID');\n    console.log(token);\n    console.log(partyID)\n\n    useEffect(() => {\n        socketRef.current = socketIOClient('http://localhost:7001');\n\n        socketRef.current.on(\"newChatMessage\", ({ message })=> {\n            setMessages(messages => [...messages, message])\n        });\n        return () => {\n            socketRef.current.disconnect();\n        };\n    }, [])\n\n    const sendMessage = ({message}) => {\n        console.log(message)\n        socketRef.current.emit(\"newChatMessage\", {message, token})\n    }\n\n    return {messages, sendMessage};\n}\n\nexport default useChat;"]},"metadata":{},"sourceType":"module"}