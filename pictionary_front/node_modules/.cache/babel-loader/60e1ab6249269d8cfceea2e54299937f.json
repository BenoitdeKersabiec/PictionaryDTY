{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\nimport 'rodal/lib/rodal.css';\nconst ioAdress = 'http://localhost:7001';\nexport default class Ingame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = ({\n      message\n    }) => {\n      this.socket.emit(\"newChatMessage\", {\n        message,\n        token: this.state.token,\n        partyID: this.state.partyID\n      });\n    };\n\n    const messages = [];\n    const players = [];\n    this.choosenWord = this.choosenWord.bind(this);\n    this.display = React.createRef();\n    this.socket = null;\n    this.state = {\n      //game data\n      time: 90,\n      isDrawing: false,\n      isPaused: false,\n      DrawerName: '',\n      randWords: [{}, {}, {}],\n      word: '',\n      //For messaging\n      messages,\n      //For players\n      players,\n      //For Drawing\n      brushColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n      },\n      brushSize: 3,\n      toolId: 'pen',\n      isPenDown: false,\n      mouseX: 0,\n      mouseY: 0,\n      prevX: 0,\n      prevY: 0,\n      cursors: [],\n      name: '',\n      partyID: localStorage.getItem('partyID'),\n      token: localStorage.getItem('token')\n    };\n  }\n\n  componentDidMount() {\n    // SocketIo communication init\n    this.socket = socketIOClient(ioAdress);\n    this.socket.on(\"playerList\", playerList => {\n      console.log(playerList);\n      this.setState({\n        players: playerList\n      });\n    });\n    this.socket.emit('new-user', {\n      token: this.state.token,\n      partyID: this.state.partyID\n    });\n    this.socket.on(\"newChatMessage\", ({\n      message\n    }) => {\n      this.setState({\n        messages: [message, ...this.state.messages]\n      });\n    });\n    this.socket.on(\"gamePaused\", data => {\n      const displayCtx = this.display.current.getContext('2d');\n      displayCtx.clearRect(0, 0, canvas.width, canvas.height);\n      this.setState({\n        isPaused: data.isPaused\n      });\n\n      if (data.name) {\n        this.setState({\n          DrawerName: data.name\n        });\n      }\n    });\n    this.socket.on(\"setDrawwing\", data => {\n      this.setState({\n        isDrawing: data.isDrawing\n      });\n      console.log(this.state.isDrawing);\n    });\n    this.socket.on(\"timerCountdown\", data => {\n      console.log(data.timer);\n      this.setState({\n        time: data.timer\n      });\n    });\n    this.socket.on(\"chooseWord\", data => {\n      this.setState({\n        randWords: data.words\n      });\n    });\n    this.socket.on('line', data => {\n      const _data$lineCoordinates = _slicedToArray(data.lineCoordinates, 4),\n            x1 = _data$lineCoordinates[0],\n            y1 = _data$lineCoordinates[1],\n            x2 = _data$lineCoordinates[2],\n            y2 = _data$lineCoordinates[3];\n\n      const displayCtx = this.display.current.getContext('2d');\n      displayCtx.lineWidth = data.lineWidth;\n      displayCtx.lineCap = 'round';\n      displayCtx.strokeStyle = \"rgba(\".concat(data.lineColor.r, \",\").concat(data.lineColor.g, \",\").concat(data.lineColor.b, \",\").concat(data.lineColor.a, \")\");\n      displayCtx.beginPath();\n      displayCtx.moveTo(x1, y1);\n      displayCtx.lineTo(x2, y2);\n      displayCtx.stroke();\n    });\n    this.socket.on('cursor', data => {\n      if (this.state.loaded) {\n        this.setState({\n          cursors: data\n        });\n      }\n    });\n    setInterval(() => {}, Math.round(1000 / 60));\n  }\n\n  handleNameInput(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleToolClick(toolId) {\n    this.setState({\n      toolId\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      brushColor: color.rgb\n    });\n  }\n\n  handleUpdatePlayers(e) {\n    e.preventDefault();\n    this.socket.emit('getPlayerList', {\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseMove(e) {\n    this.setState({\n      mouseX: e.clientX,\n      mouseY: e.clientY\n    });\n\n    if (this.state.isPenDown && this.state.isDrawing) {\n      this.display.current.getContext('2d').lineCap = 'round';\n\n      const _this$display$current = this.display.current.getBoundingClientRect(),\n            top = _this$display$current.top,\n            left = _this$display$current.left;\n\n      switch (this.state.toolId) {\n        case 'pen':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: this.state.brushColor,\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n\n        case 'eraser':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: {\n              r: 255,\n              g: 255,\n              b: 255,\n              a: this.state.brushColor.a\n            },\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n      }\n    }\n\n    this.setState({\n      prevX: this.state.mouseX,\n      prevY: this.state.mouseY\n    });\n\n    if (!this.state.isPenDown) {\n      this.setState({\n        prevX: e.clientX,\n        prevY: e.clientY\n      });\n    }\n\n    this.socket.emit('cursor', {\n      x: this.state.mouseX,\n      y: this.state.mouseY,\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseDown(e) {\n    this.setState({\n      isPenDown: true\n    });\n  }\n\n  handleDisplayMouseUp(e) {\n    this.setState({\n      isPenDown: false\n    });\n  }\n\n  handleBrushResize(e) {\n    this.setState({\n      brushSize: e.target.value\n    });\n  }\n\n  choosenWord(ind) {\n    console.log('indice :', ind);\n    const word = this.state.randWords[ind].word;\n    console.log(word);\n    this.socket.emit('wordChoosen', {\n      word: word,\n      partyID: this.state.partyID\n    });\n    this.setState({\n      word: word\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '45%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"list-group-item active\",\n      style: {\n        width: 'auto'\n      },\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, this.state.time), React.createElement(\"canvas\", {\n      className: \"display\",\n      width: \"450\",\n      height: \"450\",\n      ref: this.display,\n      style: {\n        border: \"1px solid black\"\n      },\n      onMouseMove: this.handleDisplayMouseMove.bind(this),\n      onMouseDown: this.handleDisplayMouseDown.bind(this),\n      onMouseUp: this.handleDisplayMouseUp.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"toolbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.brushColor,\n      onChangeComplete: this.handleColorChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Eraser\",\n      currentTool: this.state.toolId,\n      toolId: \"eraser\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Pen\",\n      currentTool: this.state.toolId,\n      toolId: \"pen\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }), React.createElement(\"code\", {\n      className: \"brush-size-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, \"Size (\", String(this.state.brushSize), \")\"), React.createElement(\"input\", {\n      onChange: this.handleBrushResize.bind(this),\n      value: this.state.brushSize,\n      type: \"range\",\n      min: \"1\",\n      max: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"brush-size-indicator\",\n      style: {\n        width: this.state.brushSize + 'px',\n        height: this.state.brushSize + 'px',\n        bachground: this.state.brushColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })) : '')), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      id: \"messageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })), !this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(MessageBox, {\n      onSendMessage: message => {\n        this.sendMessage({\n          message\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    })) : ''), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '70px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, React.createElement(PlayerList, {\n      playerList: this.state.players,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }))), React.createElement(Rodal, {\n      visible: this.state.isPaused,\n      showCloseButton: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, this.state.isDrawing ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Choose a word among this three one\", React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, this.state.randWords[0].word)), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, this.state.randWords[1].word)), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, this.state.randWords[2].word)))) : React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, this.state.DrawerName, \" is choosing a word\")));\n  }\n\n} //import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js"],"names":["React","Component","ChromePicker","socketIOClient","Tool","MessageBox","Messages","PlayerList","Rodal","ioAdress","Ingame","constructor","props","sendMessage","message","socket","emit","token","state","partyID","messages","players","choosenWord","bind","display","createRef","time","isDrawing","isPaused","DrawerName","randWords","word","brushColor","r","g","b","a","brushSize","toolId","isPenDown","mouseX","mouseY","prevX","prevY","cursors","name","localStorage","getItem","componentDidMount","on","playerList","console","log","setState","data","displayCtx","current","getContext","clearRect","canvas","width","height","timer","words","lineCoordinates","x1","y1","x2","y2","lineWidth","lineCap","strokeStyle","lineColor","beginPath","moveTo","lineTo","stroke","loaded","setInterval","Math","round","handleNameInput","e","target","value","handleToolClick","handleColorChange","color","rgb","handleUpdatePlayers","preventDefault","handleDisplayMouseMove","clientX","clientY","getBoundingClientRect","top","left","x","y","handleDisplayMouseDown","handleDisplayMouseUp","handleBrushResize","ind","render","border","String","bachground","paddingLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {ChromePicker} from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\n\n\n\nimport 'rodal/lib/rodal.css';\n\nconst ioAdress = 'http://localhost:7001';\n\nexport default class Ingame extends Component {\n    constructor(props) {\n        super(props);\n        const messages = [];\n        const players = [];\n\n        this.choosenWord = this.choosenWord.bind(this)\n\n        this.display = React.createRef();\n        this.socket = null;\n        this.state = {\n            //game data\n            time: 90,\n            isDrawing: false,\n            isPaused: false,\n            DrawerName: '',\n            randWords: [{},{},{}],\n            word: '',\n            //For messaging\n            messages,\n            //For players\n            players,\n            //For Drawing\n            brushColor : {r:0, g:0, b:0, a:255},\n            brushSize : 3,\n            toolId: 'pen',\n            isPenDown: false,\n            mouseX: 0,\n            mouseY: 0,\n            prevX: 0,\n            prevY: 0,\n            cursors: [],\n            name: '',\n            partyID: localStorage.getItem('partyID'),\n            token: localStorage.getItem('token')\n        }\n    }\n\n    componentDidMount(){\n        // SocketIo communication init\n        this.socket = socketIOClient(ioAdress);\n\n        this.socket.on(\"playerList\", (playerList)=> {\n            console.log(playerList)\n            this.setState({players: playerList})\n        });\n\n        this.socket.emit('new-user', {token: this.state.token, partyID: this.state.partyID})\n\n        this.socket.on(\"newChatMessage\", ({ message })=> {\n            this.setState({messages: [message,...this.state.messages]})\n        });\n\n        this.socket.on(\"gamePaused\", data => {\n\n            const displayCtx = this.display.current.getContext('2d');\n            displayCtx.clearRect(0, 0, canvas.width, canvas.height);\n            this.setState({isPaused: data.isPaused});\n            if (data.name){\n                this.setState({DrawerName: data.name})\n            }\n            \n        });\n\n        this.socket.on(\"setDrawwing\", data=> {\n            this.setState({isDrawing: data.isDrawing})\n            console.log(this.state.isDrawing)\n        });\n\n        this.socket.on(\"timerCountdown\", data => {\n            console.log(data.timer)\n            this.setState({time: data.timer})\n        });\n\n        this.socket.on(\"chooseWord\", data => {\n            this.setState({randWords: data.words})\n        });\n\n        this.socket.on('line', data => {\n\n            const [x1,y1,x2,y2] = data.lineCoordinates;\n\n            const displayCtx = this.display.current.getContext('2d');\n\n            displayCtx.lineWidth = data.lineWidth;\n            displayCtx.lineCap = 'round';\n            displayCtx.strokeStyle = `rgba(${data.lineColor.r},${data.lineColor.g},${data.lineColor.b},${data.lineColor.a})`;\n            displayCtx.beginPath();\n            displayCtx.moveTo(x1,y1);\n            displayCtx.lineTo(x2,y2);\n            displayCtx.stroke();\n            \n        });\n        this.socket.on('cursor', data => {\n            if(this.state.loaded){\n                this.setState({cursors: data});\n            }\n        });\n        setInterval(() => {\n        }, Math.round(1000/60));\n    }\n\n    sendMessage = ({message}) => {\n       this.socket.emit(\"newChatMessage\", {message, token:this.state.token,partyID: this.state.partyID})\n    }\n    \n    handleNameInput(e){\n        this.setState({name: e.target.value});\n    }\n\n    handleToolClick(toolId){\n        this.setState({toolId})\n    }\n\n    handleColorChange(color){\n        this.setState({brushColor: color.rgb});\n    }\n\n    handleUpdatePlayers(e){\n        e.preventDefault()\n        this.socket.emit('getPlayerList', {partyID: this.state.partyID})\n    }\n\n    handleDisplayMouseMove(e){\n        this.setState({\n            mouseX: e.clientX,\n            mouseY: e.clientY\n        });\n        if(this.state.isPenDown && this.state.isDrawing){\n            this.display.current.getContext('2d').lineCap = 'round';\n            const {top, left} = this.display.current.getBoundingClientRect();\n            switch(this.state.toolId){\n                case 'pen':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: this.state.brushColor,\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n                case 'eraser':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: {r: 255, g:255, b:255, a: this.state.brushColor.a},\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n            }\n        }\n        this.setState({\n            prevX: this.state.mouseX,\n            prevY: this.state.mouseY\n        });\n        if(!this.state.isPenDown){\n            this.setState({\n                prevX: e.clientX,\n                prevY: e.clientY\n            })\n        }\n        this.socket.emit('cursor', {\n            x: this.state.mouseX,\n            y: this.state.mouseY,\n            partyID: this.state.partyID\n        });\n    }\n\n    handleDisplayMouseDown(e){\n        this.setState({isPenDown: true});\n    }\n\n    handleDisplayMouseUp(e){\n        this.setState({isPenDown: false});\n    }\n\n    handleBrushResize(e){\n        this.setState({brushSize: e.target.value})\n    }\n\n    choosenWord(ind){\n        console.log('indice :', ind);\n        const word = this.state.randWords[ind].word;\n        console.log(word)\n        this.socket.emit('wordChoosen', {word: word, partyID: this.state.partyID})\n        this.setState({word: word})\n    }\n\n    \n    render() {\n        return (\n            <div>            \n            <div className=\"row\">\n            <div className=\"column\" style={{width: '45%'}}>\n                <div>\n                <button type=\"button\" class=\"list-group-item active\" style={{width: 'auto'}}disabled>\n                    {this.state.time}\n                </button>\n                    <canvas \n                    className='display' \n                    width='450' \n                    height='450' \n                    ref={this.display}\n                    style = {{border: \"1px solid black\"}}\n                    onMouseMove={this.handleDisplayMouseMove.bind(this)}\n                    onMouseDown={this.handleDisplayMouseDown.bind(this)}\n                    onMouseUp={this.handleDisplayMouseUp.bind(this)}></canvas>\n                    {this.state.isDrawing ? <div className=\"toolbox\">\n                        <ChromePicker \n                            color={this.state.brushColor} \n                            onChangeComplete={this.handleColorChange.bind(this)}>\n                            </ChromePicker>\n                        <Tool \n                            name=\"Eraser\" \n                            currentTool={this.state.toolId}\n                            toolId=\"eraser\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <Tool \n                            name=\"Pen\" \n                            currentTool={this.state.toolId}\n                            toolId=\"pen\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <code className=\"brush-size-label\">Size ({String(this.state.brushSize)})</code>\n                        <input \n                            onChange={this.handleBrushResize.bind(this)}\n                            value={this.state.brushSize}\n                            type='range'\n                            min='1'\n                            max='50'/>\n                        <span \n                            className=\"brush-size-indicator\" \n                            style={{width: this.state.brushSize + 'px',\n                                    height: this.state.brushSize + 'px',\n                                    bachground: this.state.brushColor}}>\n                            </span>\n                    </div> : ''}\n                </div>\n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '0px'}}>\n                <div className=\"row\" id='messageContainer'>\n                <Messages messages = {this.state.messages} />\n                </div>\n                {!this.state.isDrawing ? <div className=\"row\">\n                <MessageBox onSendMessage={ message => {\n                    this.sendMessage({message});\n                }}/>\n                </div> :''}\n            \n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '70px'}}>\n                <PlayerList playerList={this.state.players} />\n            </div>\n            </div>\n            <Rodal visible={this.state.isPaused} showCloseButton={false}>\n                {this.state.isDrawing ?\n                <div>\n                    Choose a word among this three one\n                    <div className = 'row'>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(0)\n                            }>\n                            {this.state.randWords[0].word}\n                        </button>\n                    </div>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(1)\n                            }>\n                            {this.state.randWords[1].word}\n                        </button>\n                    </div>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(2)\n                            }>\n                            {this.state.randWords[2].word}\n                        </button>\n                    </div>\n                    </div>\n                </div>\n                :<h4>{this.state.DrawerName} is choosing a word</h4>}\n            </Rodal>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n//import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */"]},"metadata":{},"sourceType":"module"}