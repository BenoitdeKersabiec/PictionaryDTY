{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nconst ioAdress = 'http://localhost:7001';\nexport default class Ingame extends Component {\n  constructor(props) {\n    super(props);\n    this.display = React.createRef();\n    this.socket = null;\n    this.state = {\n      brushColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n      },\n      brushSize: 3,\n      toolId: 'pen',\n      isPenDown: false,\n      mouseX: 0,\n      mouseY: 0,\n      prevX: 0,\n      prevY: 0,\n      cursors: [],\n      name: '',\n      loaded: true\n    };\n  }\n\n  componentDidMount() {\n    // SocketIo communication init\n    this.socket = socketIOClient(ioAdress); // SocketIo receive management\n\n    this.socket.on('line', data => {\n      if (this.state.data.loaded) {\n        const _data$lineCoordinates = _slicedToArray(data.lineCoordinates, 4),\n              x1 = _data$lineCoordinates[0],\n              y1 = _data$lineCoordinates[1],\n              x2 = _data$lineCoordinates[2],\n              y2 = _data$lineCoordinates[3];\n\n        const displayCtx = this.display.current.getContext('2d');\n        displayCtx.lineWidth = data.lineWidth;\n        displayCtx.strokeStyle = \"rgba(\".concat(data.lineColor.r, \",\").concat(data.lineColor.g, \",\").concat(data.lineColor.b, \",\").concat(data.lineColora, \")\");\n        displayCtx.beginPath();\n        displayCtx.moveTo(x1, y1);\n        displayCtx.lineTo(x2, y2);\n        displayCtx.stroke();\n      }\n    });\n    this.socket.on('cursor', data => {\n      if (this.state.loaded) {\n        this.setState({\n          cursors: data\n        });\n      }\n    });\n    setInterval(() => {\n      if (this.state.loaded) {\n        this.socket.emit('cursor', {\n          name: this.state.name,\n          x: this.state.mouseX,\n          y: this.state.mouseY,\n          sessionKey: window.localStorage.getItem('sessionKey')\n        });\n      }\n    }, 3000);\n    setInterval(() => {}, Math.round(1000 / 60));\n    window.addEventListener('beforeunload', this.beforeunload.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.beforeunload.bind(this));\n  }\n\n  handleNameInput(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleToolClick(toolId) {\n    this.setState({\n      toolId\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      brushColor: color.rgb\n    });\n  }\n\n  handleDisplayMouseMove(e) {\n    this.setState({\n      mouseX: e.clientX,\n      mouseY: e.clientY\n    });\n\n    if (this.state.isPenDown) {\n      this.display.current.getContext('2d').lineCap = 'round';\n\n      const _this$display$current = this.display.current.getBoundingClientRect(),\n            top = _this$display$current.top,\n            left = _this$display$current.left;\n\n      switch (this.state.toolId) {\n        case 'pen':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: this.state.brushColor,\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            sessionKey: window.localStorage.getItem('sessionKey')\n          });\n          break;\n\n        case 'eraser':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: {\n              r: 255,\n              g: 255,\n              b: 255,\n              a: this.state.brushColor.a\n            },\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            sessionKey: window.localStorage.getItem('sessionKey')\n          });\n          break;\n      }\n    }\n\n    this.setState({\n      prevX: this.state.mouseX,\n      prevY: this.state.mouseY\n    });\n\n    if (!this.state.isPenDown) {\n      this.setState({\n        prevX: e.clientX,\n        prevY: e.clientY\n      });\n    }\n\n    this.socket.emit('cursor', {\n      x: this.state.mouseX,\n      y: this.state.mouseY,\n      sessionKey: window.localStorage.getItem('sessionKey')\n    });\n  }\n\n  handleDisplayMouseDown(e) {\n    this.setState({\n      isPenDown: true\n    });\n  }\n\n  handleDisplayMouseUp(e) {\n    this.setState({\n      isPenDown: false\n    });\n  }\n\n  handleBrushResize(e) {\n    this.setState({\n      brushSize: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      className: \"display\",\n      width: \"640\",\n      height: \"480\",\n      ref: this.display,\n      style: {\n        border: \"1px solid black\"\n      },\n      onMouseMove: this.handleDisplayMouseMove.bind(this),\n      onMouseDown: this.handleDisplayMouseDown.bind(this),\n      onMouseUp: this.handleDisplayMouseUp.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"toolbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.brushColor,\n      onChangeComplete: this.handleColorChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Eraser\",\n      currentTool: this.state.toolId,\n      toolId: \"eraser\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Pen\",\n      currentTool: this.state.toolId,\n      toolId: \"pen\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"code\", {\n      className: \"brush-size-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Size (\", String(this.state.brushSize), \")\"), React.createElement(\"input\", {\n      onChange: this.handleBrushResize.bind(this),\n      value: this.state.brushSize,\n      type: \"range\",\n      min: \"1\",\n      max: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"brush-size-indicator\",\n      style: {\n        width: this.state.brushSize + 'px',\n        height: this.state.brushSize + 'px',\n        bachground: this.state.brushColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })));\n  }\n\n} //import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js"],"names":["React","Component","ChromePicker","socketIOClient","Tool","ioAdress","Ingame","constructor","props","display","createRef","socket","state","brushColor","r","g","b","a","brushSize","toolId","isPenDown","mouseX","mouseY","prevX","prevY","cursors","name","loaded","componentDidMount","on","data","lineCoordinates","x1","y1","x2","y2","displayCtx","current","getContext","lineWidth","strokeStyle","lineColor","lineColora","beginPath","moveTo","lineTo","stroke","setState","setInterval","emit","x","y","sessionKey","window","localStorage","getItem","Math","round","addEventListener","beforeunload","bind","componentWillUnmount","removeEventListener","handleNameInput","e","target","value","handleToolClick","handleColorChange","color","rgb","handleDisplayMouseMove","clientX","clientY","lineCap","getBoundingClientRect","top","left","handleDisplayMouseDown","handleDisplayMouseUp","handleBrushResize","render","border","String","width","height","bachground"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {ChromePicker} from 'react-color'\nimport socketIOClient from 'socket.io-client'\nimport Tool from './Tool'\n\n\nconst ioAdress = 'http://localhost:7001';\n\nexport default class Ingame extends Component {\n    constructor(props) {\n        super(props);\n        this.display = React.createRef();\n        this.socket = null;\n        this.state = {\n            brushColor : {r:0, g:0, b:0, a:255},\n            brushSize : 3,\n            toolId: 'pen',\n            isPenDown: false,\n            mouseX: 0,\n            mouseY: 0,\n            prevX: 0,\n            prevY: 0,\n            cursors: [],\n            name: '',\n            loaded: true\n        }\n    }\n\n    componentDidMount(){\n        // SocketIo communication init\n        this.socket = socketIOClient(ioAdress);\n\n        // SocketIo receive management\n        this.socket.on('line', data => {\n            if(this.state.data.loaded){\n                const [x1,y1,x2,y2] = data.lineCoordinates;\n\n                const displayCtx = this.display.current.getContext('2d');\n\n                displayCtx.lineWidth = data.lineWidth;\n                displayCtx.strokeStyle = `rgba(${data.lineColor.r},${data.lineColor.g},${data.lineColor.b},${data.lineColora})`;\n                displayCtx.beginPath();\n                displayCtx.moveTo(x1,y1);\n                displayCtx.lineTo(x2,y2);\n                displayCtx.stroke();\n            }\n        });\n        this.socket.on('cursor', data => {\n            if(this.state.loaded){\n                this.setState({cursors: data});\n            }\n        });\n        setInterval(()=>{\n            if(this.state.loaded){\n                this.socket.emit('cursor', {\n                    name: this.state.name,\n                    x: this.state.mouseX,\n                    y: this.state.mouseY,\n                    sessionKey: window.localStorage.getItem('sessionKey')\n                });\n            }\n        }, 3000);\n        setInterval(() => {\n        }, Math.round(1000/60));\n        \n        window.addEventListener('beforeunload', this.beforeunload.bind(this));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.beforeunload.bind(this));\n    }\n\n    \n    \n    handleNameInput(e){\n        this.setState({name: e.target.value});\n    }\n\n    handleToolClick(toolId){\n        this.setState({toolId})\n    }\n\n    handleColorChange(color){\n        this.setState({brushColor: color.rgb});\n    }\n\n    handleDisplayMouseMove(e){\n        this.setState({\n            mouseX: e.clientX,\n            mouseY: e.clientY\n        });\n        if(this.state.isPenDown){\n            this.display.current.getContext('2d').lineCap = 'round';\n            const {top, left} = this.display.current.getBoundingClientRect();\n            switch(this.state.toolId){\n                case 'pen':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: this.state.brushColor,\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        sessionKey: window.localStorage.getItem('sessionKey')\n                    });\n                    break;\n                case 'eraser':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: {r: 255, g:255, b:255, a: this.state.brushColor.a},\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        sessionKey: window.localStorage.getItem('sessionKey')\n                    });\n                    break;\n            }\n        }\n        this.setState({\n            prevX: this.state.mouseX,\n            prevY: this.state.mouseY\n        });\n        if(!this.state.isPenDown){\n            this.setState({\n                prevX: e.clientX,\n                prevY: e.clientY\n            })\n        }\n        this.socket.emit('cursor', {\n            x: this.state.mouseX,\n            y: this.state.mouseY,\n            sessionKey: window.localStorage.getItem('sessionKey')\n        });\n    }\n\n    handleDisplayMouseDown(e){\n        this.setState({isPenDown: true});\n    }\n\n    handleDisplayMouseUp(e){\n        this.setState({isPenDown: false});\n    }\n\n    handleBrushResize(e){\n        this.setState({brushSize: e.target.value})\n    }\n\n    render() {\n        return (\n            <div>\n                <canvas \n                className='display' \n                width='640' \n                height='480' \n                ref={this.display}\n                style = {{border: \"1px solid black\"}}\n                onMouseMove={this.handleDisplayMouseMove.bind(this)}\n                onMouseDown={this.handleDisplayMouseDown.bind(this)}\n                onMouseUp={this.handleDisplayMouseUp.bind(this)}></canvas>\n                <div className=\"toolbox\">\n                    <ChromePicker \n                        color={this.state.brushColor} \n                        onChangeComplete={this.handleColorChange.bind(this)}>\n                        </ChromePicker>\n                    <Tool \n                        name=\"Eraser\" \n                        currentTool={this.state.toolId}\n                        toolId=\"eraser\" \n                        onSelect={this.handleToolClick.bind(this)}/>\n                    <Tool \n                        name=\"Pen\" \n                        currentTool={this.state.toolId}\n                        toolId=\"pen\" \n                        onSelect={this.handleToolClick.bind(this)}/>\n                    <code className=\"brush-size-label\">Size ({String(this.state.brushSize)})</code>\n                    <input \n                        onChange={this.handleBrushResize.bind(this)}\n                        value={this.state.brushSize}\n                        type='range'\n                        min='1'\n                        max='50'/>\n                    <span \n                        className=\"brush-size-indicator\" \n                        style={{width: this.state.brushSize + 'px',\n                                height: this.state.brushSize + 'px',\n                                bachground: this.state.brushColor}}>\n                        </span>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n//import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */"]},"metadata":{},"sourceType":"module"}