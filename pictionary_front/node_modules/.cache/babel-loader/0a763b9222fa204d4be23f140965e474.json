{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js\";\nimport React, { Component } from 'react';\nimport { SliderPicker } from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\nimport { contextUserData } from '../../Context';\nimport 'rodal/lib/rodal.css';\nconst ioAdress = 'http://localhost:7001';\nconst canvasWidth = 450;\nconst canvasHeight = 450;\nexport default class Ingame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = ({\n      message\n    }) => {\n      this.socket.emit(\"newChatMessage\", {\n        message,\n        token: this.state.token,\n        partyID: this.state.partyID\n      });\n    };\n\n    const messages = [];\n    const players = [];\n    this.choosenWord = this.choosenWord.bind(this);\n    this.display = React.createRef();\n    this.socket = null;\n    this.state = {\n      //game data\n      time: 90,\n      isDrawing: false,\n      isPaused: false,\n      hasStarted: false,\n      isEnded: false,\n      DrawerName: '',\n      randWords: [{}, {}, {}],\n      word: '',\n      //For messaging\n      messages,\n      //For players\n      players,\n      //For Drawing\n      brushColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n      },\n      brushSize: 3,\n      toolId: 'pen',\n      isPenDown: false,\n      mouseX: 0,\n      mouseY: 0,\n      prevX: 0,\n      prevY: 0,\n      cursors: [],\n      name: '',\n      partyID: '',\n      token: ''\n    };\n  }\n\n  componentDidMount() {\n    const token = this.context.token;\n    const gameID = this.context.gameID;\n\n    if (!token) {\n      this.props.history.push(\"/users/loggin\");\n    }\n\n    if (!gameID) {\n      this.props.history.push(\"/dashboard\");\n    }\n\n    this.setState({\n      token: token,\n      partyID: gameID\n    }); // SocketIo communication init\n\n    this.socket = socketIOClient(ioAdress);\n    this.socket.on(\"playerList\", playerList => {\n      this.setState({\n        players: playerList\n      });\n    });\n    this.socket.emit('new-user', {\n      token: token,\n      partyID: gameID\n    });\n    this.socket.on(\"newChatMessage\", ({\n      message\n    }) => {\n      this.setState({\n        messages: [message, ...this.state.messages]\n      });\n    });\n    this.socket.on(\"hasStarted\", data => this.setState({\n      hasStarted: data.hasStarted\n    }));\n    this.socket.on(\"gamePaused\", data => {\n      const displayCtx = this.display.current.getContext('2d');\n      displayCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n      this.setState({\n        isPaused: data.isPaused\n      });\n\n      if (data.name) {\n        this.setState({\n          DrawerName: data.name\n        });\n      }\n    });\n    this.socket.on(\"isEnded\", data => {\n      console.log('PartyEnded');\n      this.setState({\n        isEnded: data.isEnded\n      });\n    });\n    this.socket.on(\"setDrawwing\", data => {\n      this.setState({\n        isDrawing: data.isDrawing\n      });\n    });\n    this.socket.on(\"timerCountdown\", data => {\n      this.setState({\n        time: data.timer\n      });\n    });\n    this.socket.on(\"chooseWord\", data => {\n      this.setState({\n        randWords: data.words\n      });\n    });\n    this.socket.on('line', data => {\n      if (this.state.hasStarted) {\n        const _data$lineCoordinates = _slicedToArray(data.lineCoordinates, 4),\n              x1 = _data$lineCoordinates[0],\n              y1 = _data$lineCoordinates[1],\n              x2 = _data$lineCoordinates[2],\n              y2 = _data$lineCoordinates[3];\n\n        const displayCtx = this.display.current.getContext('2d');\n        displayCtx.lineWidth = data.lineWidth;\n        displayCtx.lineCap = 'round';\n        displayCtx.strokeStyle = \"rgba(\".concat(data.lineColor.r, \",\").concat(data.lineColor.g, \",\").concat(data.lineColor.b, \",\").concat(data.lineColor.a, \")\");\n        displayCtx.beginPath();\n        displayCtx.moveTo(x1, y1);\n        displayCtx.lineTo(x2, y2);\n        displayCtx.stroke();\n      }\n    });\n    this.socket.on('cursor', data => {\n      if (this.state.loaded) {\n        this.setState({\n          cursors: data\n        });\n      }\n    });\n    this.socket.on('setWord', data => this.setState({\n      word: data.word\n    }));\n    setInterval(() => {}, Math.round(1000 / 60));\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect();\n  }\n\n  handleNameInput(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleToolClick(toolId) {\n    this.setState({\n      toolId\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      brushColor: color.rgb\n    });\n  }\n\n  handleUpdatePlayers(e) {\n    e.preventDefault();\n    this.socket.emit('getPlayerList', {\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseMove(e) {\n    this.setState({\n      mouseX: e.clientX,\n      mouseY: e.clientY\n    });\n\n    if (this.state.isPenDown && this.state.isDrawing) {\n      this.display.current.getContext('2d').lineCap = 'round';\n\n      const _this$display$current = this.display.current.getBoundingClientRect(),\n            top = _this$display$current.top,\n            left = _this$display$current.left;\n\n      switch (this.state.toolId) {\n        case 'pen':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: this.state.brushColor,\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n\n        case 'eraser':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: {\n              r: 255,\n              g: 255,\n              b: 255,\n              a: this.state.brushColor.a\n            },\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n\n        default:\n          console.log('Choose pen or Eraser');\n      }\n    }\n\n    this.setState({\n      prevX: this.state.mouseX,\n      prevY: this.state.mouseY\n    });\n\n    if (!this.state.isPenDown) {\n      this.setState({\n        prevX: e.clientX,\n        prevY: e.clientY\n      });\n    }\n\n    this.socket.emit('cursor', {\n      x: this.state.mouseX,\n      y: this.state.mouseY,\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseDown(e) {\n    this.setState({\n      isPenDown: true\n    });\n  }\n\n  handleDisplayMouseUp(e) {\n    this.setState({\n      isPenDown: false\n    });\n  }\n\n  handleBrushResize(e) {\n    this.setState({\n      brushSize: e.target.value\n    });\n  }\n\n  choosenWord(ind) {\n    const word = this.state.randWords[ind].word;\n    this.socket.emit('wordChoosen', {\n      word: word,\n      partyID: this.state.partyID\n    });\n    this.setState({\n      word: word\n    });\n  }\n\n  handleStartGame(e) {\n    e.preventDefault();\n    this.socket.emit('startGame', {\n      gameID: this.state.partyID\n    });\n  }\n\n  displayWinner() {\n    const players = this.state.players;\n    var maxScore = 0;\n    var name = '';\n    players.forEach(player => {\n      if (player.score > maxScore) {\n        maxScore = player.score;\n        name = player.name;\n      }\n    });\n    return React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \" \", name, \" has won\");\n  }\n\n  displayWord() {\n    if (this.state.isDrawing) {\n      return React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, this.state.word);\n    } else {\n      const word = this.state.word;\n      var display = '';\n\n      for (var i = 0; i < word.length; i++) {\n        const letter = word.charAt(i);\n\n        if (letter === ' ') {\n          display = display + ' ';\n        } else {\n          display = display + '_';\n        }\n      }\n\n      return React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, display);\n    }\n  }\n\n  displayStartButton() {\n    if (this.state.players.length < 2) {\n      return React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-success\",\n        onClick: this.handleStartGame.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, \"Start the Game\");\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '45%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, this.state.hasStarted ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '50%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"list-group-item active\",\n      style: {\n        width: 'auto'\n      },\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, this.state.time)), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '50%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, this.displayWord())), React.createElement(\"canvas\", {\n      className: \"display\",\n      width: canvasWidth.toString(),\n      height: canvasHeight.toString(),\n      ref: this.display,\n      style: {\n        border: \"1px solid black\"\n      },\n      onMouseMove: this.handleDisplayMouseMove.bind(this),\n      onMouseDown: this.handleDisplayMouseDown.bind(this),\n      onMouseUp: this.handleDisplayMouseUp.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })) : this.displayStartButton.bind(this), this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"toolbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(SliderPicker, {\n      color: this.state.brushColor,\n      onChangeComplete: this.handleColorChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Eraser\",\n      currentTool: this.state.toolId,\n      toolId: \"eraser\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Pen\",\n      currentTool: this.state.toolId,\n      toolId: \"pen\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }), React.createElement(\"code\", {\n      className: \"brush-size-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }, \"Size (\", String(this.state.brushSize), \")\"), React.createElement(\"input\", {\n      onChange: this.handleBrushResize.bind(this),\n      value: this.state.brushSize,\n      type: \"range\",\n      min: \"1\",\n      max: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"brush-size-indicator\",\n      style: {\n        width: this.state.brushSize + 'px',\n        height: this.state.brushSize + 'px',\n        bachground: this.state.brushColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    })) : '')), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      id: \"messageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    })), !this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, React.createElement(MessageBox, {\n      onSendMessage: message => {\n        this.sendMessage({\n          message\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    })) : ''), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '70px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(PlayerList, {\n      playerList: this.state.players,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }))), React.createElement(Rodal, {\n      visible: this.state.isPaused,\n      showCloseButton: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, this.state.isDrawing ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, \"Choose a word among this three one\", React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(0),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, this.state.randWords[0].word)), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, this.state.randWords[1].word)), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '33%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.choosenWord(2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, this.state.randWords[2].word)))) : React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, this.state.DrawerName, \" is choosing a word\")), React.createElement(Rodal, {\n      visible: this.state.isEnded,\n      showCloseButton: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, this.displayWinner()), React.createElement(PlayerList, {\n      playerList: this.state.players,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => {\n        this.socket.disconnect();\n        this.props.history.push('/dashboard');\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Go back to Dashboad\")));\n  }\n\n}\nIngame.contextType = contextUserData;","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js"],"names":["React","Component","SliderPicker","socketIOClient","Tool","MessageBox","Messages","PlayerList","Rodal","contextUserData","ioAdress","canvasWidth","canvasHeight","Ingame","constructor","props","sendMessage","message","socket","emit","token","state","partyID","messages","players","choosenWord","bind","display","createRef","time","isDrawing","isPaused","hasStarted","isEnded","DrawerName","randWords","word","brushColor","r","g","b","a","brushSize","toolId","isPenDown","mouseX","mouseY","prevX","prevY","cursors","name","componentDidMount","context","gameID","history","push","setState","on","playerList","data","displayCtx","current","getContext","clearRect","console","log","timer","words","lineCoordinates","x1","y1","x2","y2","lineWidth","lineCap","strokeStyle","lineColor","beginPath","moveTo","lineTo","stroke","loaded","setInterval","Math","round","componentWillUnmount","disconnect","handleNameInput","e","target","value","handleToolClick","handleColorChange","color","rgb","handleUpdatePlayers","preventDefault","handleDisplayMouseMove","clientX","clientY","getBoundingClientRect","top","left","x","y","handleDisplayMouseDown","handleDisplayMouseUp","handleBrushResize","ind","handleStartGame","displayWinner","maxScore","forEach","player","score","displayWord","i","length","letter","charAt","displayStartButton","render","width","toString","border","String","height","bachground","paddingLeft","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {SliderPicker} from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\nimport { contextUserData } from '../../Context'\n\n\n\nimport 'rodal/lib/rodal.css';\n\nconst ioAdress = 'http://localhost:7001';\nconst canvasWidth = 450;\nconst canvasHeight = 450\n\nexport default class Ingame extends Component {\n    static contextType = contextUserData\n\n    constructor(props) {\n        super(props);\n        const messages = [];\n        const players = [];\n\n        this.choosenWord = this.choosenWord.bind(this)\n\n        this.display = React.createRef();\n        this.socket = null;\n        this.state = {\n            //game data\n            time: 90,\n            isDrawing: false,\n            isPaused: false,\n            hasStarted: false,\n            isEnded: false,\n            DrawerName: '',\n            randWords: [{},{},{}],\n            word: '',\n            //For messaging\n            messages,\n            //For players\n            players,\n            //For Drawing\n            brushColor : {r:0, g:0, b:0, a:255},\n            brushSize : 3,\n            toolId: 'pen',\n            isPenDown: false,\n            mouseX: 0,\n            mouseY: 0,\n            prevX: 0,\n            prevY: 0,\n            cursors: [],\n            name: '',\n            partyID: '',\n            token: ''\n        }\n    }\n\n    componentDidMount(){\n        const token = this.context.token;\n        const gameID = this.context.gameID\n        if(!token){\n            this.props.history.push(\"/users/loggin\")\n        }\n        if(!gameID){\n            this.props.history.push(\"/dashboard\")\n        }\n        this.setState({token: token, partyID: gameID})\n\n        // SocketIo communication init\n        this.socket = socketIOClient(ioAdress);\n\n        this.socket.on(\"playerList\", (playerList)=> {\n            this.setState({players: playerList})\n        });\n\n        this.socket.emit('new-user', {token: token, partyID: gameID})\n\n        this.socket.on(\"newChatMessage\", ({ message })=> {\n            this.setState({messages: [message,...this.state.messages]})\n        });\n\n        this.socket.on(\"hasStarted\", data => this.setState({hasStarted: data.hasStarted}))\n\n        this.socket.on(\"gamePaused\", data => {\n\n            const displayCtx = this.display.current.getContext('2d');\n            displayCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n            this.setState({isPaused: data.isPaused});\n            if (data.name){\n                this.setState({DrawerName: data.name})\n            }\n            \n        });\n\n        this.socket.on(\"isEnded\", data => {\n            console.log('PartyEnded')\n            this.setState({isEnded: data.isEnded})\n        })\n\n        this.socket.on(\"setDrawwing\", data=> {\n            this.setState({isDrawing: data.isDrawing})\n        });\n\n        this.socket.on(\"timerCountdown\", data => {\n            this.setState({time: data.timer})\n        });\n\n        this.socket.on(\"chooseWord\", data => {\n            this.setState({randWords: data.words})\n        });\n\n        this.socket.on('line', data => {\n            if (this.state.hasStarted){\n                const [x1,y1,x2,y2] = data.lineCoordinates;\n\n                const displayCtx = this.display.current.getContext('2d');\n\n                displayCtx.lineWidth = data.lineWidth;\n                displayCtx.lineCap = 'round';\n                displayCtx.strokeStyle = `rgba(${data.lineColor.r},${data.lineColor.g},${data.lineColor.b},${data.lineColor.a})`;\n                displayCtx.beginPath();\n                displayCtx.moveTo(x1,y1);\n                displayCtx.lineTo(x2,y2);\n                displayCtx.stroke();\n            }\n        });\n\n        this.socket.on('cursor', data => {\n            if(this.state.loaded){\n                this.setState({cursors: data});\n            }\n        });\n\n        this.socket.on('setWord', data => this.setState({word: data.word}))\n        setInterval(() => {\n        }, Math.round(1000/60));\n    }\n\n    componentWillUnmount(){\n        this.socket.disconnect()\n    }\n\n    sendMessage = ({message}) => {\n       this.socket.emit(\"newChatMessage\", {message, token:this.state.token,partyID: this.state.partyID})\n    }\n    \n    handleNameInput(e){\n        this.setState({name: e.target.value});\n    }\n\n    handleToolClick(toolId){\n        this.setState({toolId})\n    }\n\n    handleColorChange(color){\n        this.setState({brushColor: color.rgb});\n    }\n\n    handleUpdatePlayers(e){\n        e.preventDefault()\n        this.socket.emit('getPlayerList', {partyID: this.state.partyID})\n    }\n\n    \n\n    handleDisplayMouseMove(e){\n        this.setState({\n            mouseX: e.clientX,\n            mouseY: e.clientY\n        });\n        if(this.state.isPenDown && this.state.isDrawing){\n            this.display.current.getContext('2d').lineCap = 'round';\n            const {top, left} = this.display.current.getBoundingClientRect();\n            switch(this.state.toolId){\n                case 'pen':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: this.state.brushColor,\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n                case 'eraser':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: {r: 255, g:255, b:255, a: this.state.brushColor.a},\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n                default:\n                    console.log('Choose pen or Eraser')\n            }\n        }\n        this.setState({\n            prevX: this.state.mouseX,\n            prevY: this.state.mouseY\n        });\n        if(!this.state.isPenDown){\n            this.setState({\n                prevX: e.clientX,\n                prevY: e.clientY\n            })\n        }\n        this.socket.emit('cursor', {\n            x: this.state.mouseX,\n            y: this.state.mouseY,\n            partyID: this.state.partyID\n        });\n    }\n\n    handleDisplayMouseDown(e){\n        this.setState({isPenDown: true});\n    }\n\n    handleDisplayMouseUp(e){\n        this.setState({isPenDown: false});\n    }\n\n    handleBrushResize(e){\n        this.setState({brushSize: e.target.value})\n    }\n\n    choosenWord(ind){\n        const word = this.state.randWords[ind].word;\n        this.socket.emit('wordChoosen', {word: word, partyID: this.state.partyID})\n        this.setState({word: word})\n    }\n\n    handleStartGame(e){\n        e.preventDefault()\n        this.socket.emit('startGame', {gameID: this.state.partyID})\n    }\n\n    displayWinner(){\n        const players = this.state.players;\n        var maxScore = 0;\n        var name = '';\n        players.forEach(player => {\n            if (player.score > maxScore){\n                maxScore = player.score;\n                name = player.name\n            }\n        });\n        return <h4> {name} has won</h4>\n    }\n\n    displayWord(){\n        if (this.state.isDrawing){\n            return <h4>{this.state.word}</h4>\n        } else {\n            const word = this.state.word;\n            var display = ''\n            for (var i=0; i<word.length; i++){\n                const letter = word.charAt(i)\n                if (letter === ' '){\n                    display = display + ' ';\n                } else {\n                    display = display + '_';\n                }\n            }\n            return <h4>{display}</h4>\n        }\n    }\n\n    displayStartButton(){\n        if (this.state.players.length<2){\n            return (\n                <button type=\"button\" className=\"btn btn-success\" onClick={this.handleStartGame.bind(this)}>\n                            Start the Game\n                </button>\n            )\n        }\n        \n    }\n\n    render() {\n        return (\n            <div>            \n            <div className=\"row\">\n            <div className=\"column\" style={{width: '45%'}}>\n                <div>\n                \n                    {this.state.hasStarted ?\n                    <div>\n                    <div className = \"row\">\n                        <div className=\"column\" style={{width: '50%'}}>\n                            <button type=\"button\" className=\"list-group-item active\" style={{width: 'auto'}}disabled>\n                                {this.state.time}\n                            </button>\n                        </div>\n                        <div className=\"column\" style={{width: '50%'}}>\n                            {this.displayWord()}\n                        </div>\n                    </div>\n                    \n\n                    <canvas \n                    className='display' \n                    width={canvasWidth.toString()} \n                    height={canvasHeight.toString()}\n                    ref={this.display}\n                    style = {{border: \"1px solid black\"}}\n                    onMouseMove={this.handleDisplayMouseMove.bind(this)}\n                    onMouseDown={this.handleDisplayMouseDown.bind(this)}\n                    onMouseUp={this.handleDisplayMouseUp.bind(this)}></canvas>\n                    </div>: \n                    this.displayStartButton.bind(this)}\n                    {this.state.isDrawing ? <div className=\"toolbox\">\n                        <SliderPicker \n                            color={this.state.brushColor} \n                            onChangeComplete={this.handleColorChange.bind(this)}>\n                            </SliderPicker>\n                        <Tool \n                            name=\"Eraser\" \n                            currentTool={this.state.toolId}\n                            toolId=\"eraser\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <Tool \n                            name=\"Pen\" \n                            currentTool={this.state.toolId}\n                            toolId=\"pen\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <code className=\"brush-size-label\">Size ({String(this.state.brushSize)})</code>\n                        <input \n                            onChange={this.handleBrushResize.bind(this)}\n                            value={this.state.brushSize}\n                            type='range'\n                            min='1'\n                            max='50'/>\n                        <span \n                            className=\"brush-size-indicator\" \n                            style={{width: this.state.brushSize + 'px',\n                                    height: this.state.brushSize + 'px',\n                                    bachground: this.state.brushColor}}>\n                            </span>\n                    </div> : ''}\n                </div>\n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '0px'}}>\n                <div className=\"row\" id='messageContainer'>\n                <Messages messages = {this.state.messages} />\n                </div>\n                {!this.state.isDrawing ? <div className=\"row\">\n                <MessageBox onSendMessage={ message => {\n                    this.sendMessage({message});\n                }}/>\n                </div> :''}\n            \n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '70px'}}>\n                <PlayerList playerList={this.state.players} />\n            </div>\n            </div>\n            <Rodal visible={this.state.isPaused} showCloseButton={false}>\n                {this.state.isDrawing ?\n                <div>\n                    Choose a word among this three one\n                    <div className = 'row'>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(0)\n                            }>\n                            {this.state.randWords[0].word}\n                        </button>\n                    </div>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(1)\n                            }>\n                            {this.state.randWords[1].word}\n                        </button>\n                    </div>\n                    <div className=\"column\" style={{width: '33%'}}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={() =>\n                            this.choosenWord(2)\n                            }>\n                            {this.state.randWords[2].word}\n                        </button>\n                    </div>\n                    </div>\n                </div>\n                :<h4>{this.state.DrawerName} is choosing a word</h4>}\n            </Rodal>\n            <Rodal visible={this.state.isEnded} showCloseButton={false}>\n                <p>{this.displayWinner()}</p>\n                <PlayerList playerList={this.state.players} />\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => {\n                    this.socket.disconnect();\n                    this.props.history.push('/dashboard')\n                    }\n                    \n                    }>\n                    Go back to Dashboad\n                </button>\n            </Rodal>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}