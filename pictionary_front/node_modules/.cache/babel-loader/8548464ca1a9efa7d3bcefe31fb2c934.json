{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages'; //import PlayerList from './PlayerList/PlayerList'\n\nconst ioAdress = 'http://localhost:7001';\nexport default class Ingame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = ({\n      message\n    }) => {\n      this.socket.emit(\"newChatMessage\", {\n        message,\n        token: this.state.token,\n        partyId: this.state.partyID\n      });\n    };\n\n    const messages = [];\n    this.display = React.createRef();\n    this.socket = null;\n    this.state = {\n      //For messaging\n      messages,\n      //For Drawing\n      brushColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n      },\n      brushSize: 3,\n      toolId: 'pen',\n      isPenDown: false,\n      mouseX: 0,\n      mouseY: 0,\n      prevX: 0,\n      prevY: 0,\n      cursors: [],\n      name: '',\n      partyID: localStorage.getItem('partyID'),\n      token: localStorage.getItem('token')\n    };\n  }\n\n  componentDidMount() {\n    // SocketIo communication init\n    this.socket = socketIOClient(ioAdress);\n    this.socket.emit('new-user', {\n      token: this.state.token,\n      partyID: this.state.partyID\n    }); // SocketIo receive management\n\n    this.socket.on(\"newChatMessage\", ({\n      message\n    }) => {\n      this.state.setMessages(this.setState({\n        messages: [message, ...this.state.messages]\n      }));\n    });\n    this.socket.on('line', data => {\n      const _data$lineCoordinates = _slicedToArray(data.lineCoordinates, 4),\n            x1 = _data$lineCoordinates[0],\n            y1 = _data$lineCoordinates[1],\n            x2 = _data$lineCoordinates[2],\n            y2 = _data$lineCoordinates[3];\n\n      const displayCtx = this.display.current.getContext('2d');\n      displayCtx.lineWidth = data.lineWidth;\n      displayCtx.strokeStyle = \"rgba(\".concat(data.lineColor.r, \",\").concat(data.lineColor.g, \",\").concat(data.lineColor.b, \",\").concat(data.lineColor.a, \")\");\n      displayCtx.beginPath();\n      displayCtx.moveTo(x1, y1);\n      displayCtx.lineTo(x2, y2);\n      displayCtx.stroke();\n    });\n    this.socket.on('cursor', data => {\n      if (this.state.loaded) {\n        this.setState({\n          cursors: data\n        });\n      }\n    });\n    setInterval(() => {}, Math.round(1000 / 60));\n  }\n\n  handleNameInput(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleToolClick(toolId) {\n    this.setState({\n      toolId\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      brushColor: color.rgb\n    });\n  }\n\n  handleDisplayMouseMove(e) {\n    console.log(localStorage.getItem('partyID'));\n    this.setState({\n      mouseX: e.clientX,\n      mouseY: e.clientY\n    });\n\n    if (this.state.isPenDown) {\n      this.display.current.getContext('2d').lineCap = 'round';\n\n      const _this$display$current = this.display.current.getBoundingClientRect(),\n            top = _this$display$current.top,\n            left = _this$display$current.left;\n\n      switch (this.state.toolId) {\n        case 'pen':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: this.state.brushColor,\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n\n        case 'eraser':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: {\n              r: 255,\n              g: 255,\n              b: 255,\n              a: this.state.brushColor.a\n            },\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n      }\n    }\n\n    this.setState({\n      prevX: this.state.mouseX,\n      prevY: this.state.mouseY\n    });\n\n    if (!this.state.isPenDown) {\n      this.setState({\n        prevX: e.clientX,\n        prevY: e.clientY\n      });\n    }\n\n    this.socket.emit('cursor', {\n      x: this.state.mouseX,\n      y: this.state.mouseY,\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseDown(e) {\n    this.setState({\n      isPenDown: true\n    });\n  }\n\n  handleDisplayMouseUp(e) {\n    this.setState({\n      isPenDown: false\n    });\n  }\n\n  handleBrushResize(e) {\n    this.setState({\n      brushSize: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      className: \"display\",\n      width: \"500\",\n      height: \"500\",\n      ref: this.display,\n      style: {\n        border: \"1px solid black\"\n      },\n      onMouseMove: this.handleDisplayMouseMove.bind(this),\n      onMouseDown: this.handleDisplayMouseDown.bind(this),\n      onMouseUp: this.handleDisplayMouseUp.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"toolbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.brushColor,\n      onChangeComplete: this.handleColorChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Eraser\",\n      currentTool: this.state.toolId,\n      toolId: \"eraser\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Pen\",\n      currentTool: this.state.toolId,\n      toolId: \"pen\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"code\", {\n      className: \"brush-size-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Size (\", String(this.state.brushSize), \")\"), React.createElement(\"input\", {\n      onChange: this.handleBrushResize.bind(this),\n      value: this.state.brushSize,\n      type: \"range\",\n      min: \"1\",\n      max: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"brush-size-indicator\",\n      style: {\n        width: this.state.brushSize + 'px',\n        height: this.state.brushSize + 'px',\n        bachground: this.state.brushColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      id: \"messageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(MessageBox, {\n      onSendMessage: message => {\n        this.sendMessage({\n          message\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }))));\n  }\n\n} //import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js"],"names":["React","Component","ChromePicker","socketIOClient","Tool","MessageBox","Messages","ioAdress","Ingame","constructor","props","sendMessage","message","socket","emit","token","state","partyId","partyID","messages","display","createRef","brushColor","r","g","b","a","brushSize","toolId","isPenDown","mouseX","mouseY","prevX","prevY","cursors","name","localStorage","getItem","componentDidMount","on","setMessages","setState","data","lineCoordinates","x1","y1","x2","y2","displayCtx","current","getContext","lineWidth","strokeStyle","lineColor","beginPath","moveTo","lineTo","stroke","loaded","setInterval","Math","round","handleNameInput","e","target","value","handleToolClick","handleColorChange","color","rgb","handleDisplayMouseMove","console","log","clientX","clientY","lineCap","getBoundingClientRect","top","left","x","y","handleDisplayMouseDown","handleDisplayMouseUp","handleBrushResize","render","border","bind","String","width","height","bachground"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport {ChromePicker} from 'react-color'\nimport socketIOClient from 'socket.io-client'\nimport Tool from './Tool'\nimport MessageBox from './MessageBox/MessageBox'\nimport Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n\n\nconst ioAdress = 'http://localhost:7001';\n\nexport default class Ingame extends Component {\n    constructor(props) {\n        super(props);\n        const messages = [];\n\n        this.display = React.createRef();\n        this.socket = null;\n        this.state = {\n            //For messaging\n            messages,\n            //For Drawing\n            brushColor : {r:0, g:0, b:0, a:255},\n            brushSize : 3,\n            toolId: 'pen',\n            isPenDown: false,\n            mouseX: 0,\n            mouseY: 0,\n            prevX: 0,\n            prevY: 0,\n            cursors: [],\n            name: '',\n            partyID: localStorage.getItem('partyID'),\n            token: localStorage.getItem('token')\n        }\n    }\n\n    componentDidMount(){\n        // SocketIo communication init\n        this.socket = socketIOClient(ioAdress);\n\n        this.socket.emit('new-user', {token: this.state.token, partyID: this.state.partyID})\n\n        // SocketIo receive management\n        this.socket.on(\"newChatMessage\", ({ message })=> {\n            this.state.setMessages(this.setState({messages: [message,...this.state.messages]}))\n        });\n\n        this.socket.on('line', data => {\n\n            const [x1,y1,x2,y2] = data.lineCoordinates;\n\n            const displayCtx = this.display.current.getContext('2d');\n\n            displayCtx.lineWidth = data.lineWidth;\n            displayCtx.strokeStyle = `rgba(${data.lineColor.r},${data.lineColor.g},${data.lineColor.b},${data.lineColor.a})`;\n            displayCtx.beginPath();\n            displayCtx.moveTo(x1,y1);\n            displayCtx.lineTo(x2,y2);\n            displayCtx.stroke();\n            \n        });\n        this.socket.on('cursor', data => {\n            if(this.state.loaded){\n                this.setState({cursors: data});\n            }\n        });\n        setInterval(() => {\n        }, Math.round(1000/60));\n    }\n\n    sendMessage = ({message}) => {\n       this.socket.emit(\"newChatMessage\", {message, token:this.state.token,partyId: this.state.partyID})\n    }\n    \n    handleNameInput(e){\n        this.setState({name: e.target.value});\n    }\n\n    handleToolClick(toolId){\n        this.setState({toolId})\n    }\n\n    handleColorChange(color){\n        this.setState({brushColor: color.rgb});\n    }\n\n    handleDisplayMouseMove(e){\n        console.log(localStorage.getItem('partyID'))\n        this.setState({\n            mouseX: e.clientX,\n            mouseY: e.clientY\n        });\n        if(this.state.isPenDown){\n            this.display.current.getContext('2d').lineCap = 'round';\n            const {top, left} = this.display.current.getBoundingClientRect();\n            switch(this.state.toolId){\n                case 'pen':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: this.state.brushColor,\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n                case 'eraser':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: {r: 255, g:255, b:255, a: this.state.brushColor.a},\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n            }\n        }\n        this.setState({\n            prevX: this.state.mouseX,\n            prevY: this.state.mouseY\n        });\n        if(!this.state.isPenDown){\n            this.setState({\n                prevX: e.clientX,\n                prevY: e.clientY\n            })\n        }\n        this.socket.emit('cursor', {\n            x: this.state.mouseX,\n            y: this.state.mouseY,\n            partyID: this.state.partyID\n        });\n    }\n\n    handleDisplayMouseDown(e){\n        this.setState({isPenDown: true});\n    }\n\n    handleDisplayMouseUp(e){\n        this.setState({isPenDown: false});\n    }\n\n    handleBrushResize(e){\n        this.setState({brushSize: e.target.value})\n    }\n\n    \n    render() {\n        return (\n            <div className=\"row\">\n            <div className=\"column left\">\n                <div>\n                    <canvas \n                    className='display' \n                    width='500' \n                    height='500' \n                    ref={this.display}\n                    style = {{border: \"1px solid black\"}}\n                    onMouseMove={this.handleDisplayMouseMove.bind(this)}\n                    onMouseDown={this.handleDisplayMouseDown.bind(this)}\n                    onMouseUp={this.handleDisplayMouseUp.bind(this)}></canvas>\n                    <div className=\"toolbox\">\n                        <ChromePicker \n                            color={this.state.brushColor} \n                            onChangeComplete={this.handleColorChange.bind(this)}>\n                            </ChromePicker>\n                        <Tool \n                            name=\"Eraser\" \n                            currentTool={this.state.toolId}\n                            toolId=\"eraser\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <Tool \n                            name=\"Pen\" \n                            currentTool={this.state.toolId}\n                            toolId=\"pen\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <code className=\"brush-size-label\">Size ({String(this.state.brushSize)})</code>\n                        <input \n                            onChange={this.handleBrushResize.bind(this)}\n                            value={this.state.brushSize}\n                            type='range'\n                            min='1'\n                            max='50'/>\n                        <span \n                            className=\"brush-size-indicator\" \n                            style={{width: this.state.brushSize + 'px',\n                                    height: this.state.brushSize + 'px',\n                                    bachground: this.state.brushColor}}>\n                            </span>\n                    </div>\n                </div>\n            </div>\n                <div className=\"column\" style={{width: '25%'}}>\n                <div className=\"row\" id='messageContainer'>\n                <Messages messages = {this.state.messages} />\n                </div>\n                <div className=\"row\">\n                <MessageBox onSendMessage={ message => {\n                    this.sendMessage({message});\n                }}/>\n                </div>\n            </div>\n            </div>\n            \n        )\n    }\n}\n\n\n\n\n\n\n\n//import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */"]},"metadata":{},"sourceType":"module"}