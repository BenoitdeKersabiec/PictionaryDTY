{"ast":null,"code":"import _slicedToArray from \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\nimport 'rodal/lib/rodal.css';\nconst ioAdress = 'http://localhost:7001';\nexport default class Ingame extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = ({\n      message\n    }) => {\n      this.socket.emit(\"newChatMessage\", {\n        message,\n        token: this.state.token,\n        partyID: this.state.partyID\n      });\n    };\n\n    const messages = [];\n    const players = [];\n    this.display = React.createRef();\n    this.socket = null;\n    this.state = {\n      //game data\n      time: 90,\n      isDrawing: false,\n      isPaused: false,\n      //For messaging\n      messages,\n      //For players\n      players,\n      //For Drawing\n      brushColor: {\n        r: 0,\n        g: 0,\n        b: 0,\n        a: 255\n      },\n      brushSize: 3,\n      toolId: 'pen',\n      isPenDown: false,\n      mouseX: 0,\n      mouseY: 0,\n      prevX: 0,\n      prevY: 0,\n      cursors: [],\n      name: '',\n      partyID: localStorage.getItem('partyID'),\n      token: localStorage.getItem('token')\n    };\n  }\n\n  componentDidMount() {\n    // SocketIo communication init\n    this.socket = socketIOClient(ioAdress);\n    this.socket.on(\"playerList\", playerList => {\n      console.log(playerList);\n      this.setState({\n        players: playerList\n      });\n    });\n    this.socket.emit('new-user', {\n      token: this.state.token,\n      partyID: this.state.partyID\n    });\n    this.socket.on(\"newChatMessage\", ({\n      message\n    }) => {\n      this.setState({\n        messages: [message, ...this.state.messages]\n      });\n    });\n    this.socket.on(\"gamePaused\", data => {\n      this.setState({\n        isPaused: data.isPaused\n      });\n    });\n    this.socket.on(\"setDrawwing\", data => {\n      this.setState({\n        isDrawing: data.isDrawing\n      });\n      console.log(this.state.isDrawing);\n    });\n    this.socket.on(\"timerCountdown\", data => {\n      console.log(data.timer);\n      this.setState({\n        time: data.timer\n      });\n    });\n    this.socket.on('line', data => {\n      const _data$lineCoordinates = _slicedToArray(data.lineCoordinates, 4),\n            x1 = _data$lineCoordinates[0],\n            y1 = _data$lineCoordinates[1],\n            x2 = _data$lineCoordinates[2],\n            y2 = _data$lineCoordinates[3];\n\n      const displayCtx = this.display.current.getContext('2d');\n      displayCtx.lineWidth = data.lineWidth;\n      displayCtx.lineCap = 'round';\n      displayCtx.strokeStyle = \"rgba(\".concat(data.lineColor.r, \",\").concat(data.lineColor.g, \",\").concat(data.lineColor.b, \",\").concat(data.lineColor.a, \")\");\n      displayCtx.beginPath();\n      displayCtx.moveTo(x1, y1);\n      displayCtx.lineTo(x2, y2);\n      displayCtx.stroke();\n    });\n    this.socket.on('cursor', data => {\n      if (this.state.loaded) {\n        this.setState({\n          cursors: data\n        });\n      }\n    });\n    setInterval(() => {}, Math.round(1000 / 60));\n  }\n\n  handleNameInput(e) {\n    this.setState({\n      name: e.target.value\n    });\n  }\n\n  handleToolClick(toolId) {\n    this.setState({\n      toolId\n    });\n  }\n\n  handleColorChange(color) {\n    this.setState({\n      brushColor: color.rgb\n    });\n  }\n\n  handleUpdatePlayers(e) {\n    e.preventDefault();\n    this.socket.emit('getPlayerList', {\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseMove(e) {\n    this.setState({\n      mouseX: e.clientX,\n      mouseY: e.clientY\n    });\n\n    if (this.state.isPenDown) {\n      this.display.current.getContext('2d').lineCap = 'round';\n\n      const _this$display$current = this.display.current.getBoundingClientRect(),\n            top = _this$display$current.top,\n            left = _this$display$current.left;\n\n      switch (this.state.toolId) {\n        case 'pen':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: this.state.brushColor,\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n\n        case 'eraser':\n          this.socket.emit('line', {\n            lineWidth: this.state.brushSize,\n            lineColor: {\n              r: 255,\n              g: 255,\n              b: 255,\n              a: this.state.brushColor.a\n            },\n            lineCoordinates: [this.state.prevX - left, this.state.prevY - top, this.state.mouseX - left, this.state.mouseY - top],\n            partyID: this.state.partyID\n          });\n          break;\n      }\n    }\n\n    this.setState({\n      prevX: this.state.mouseX,\n      prevY: this.state.mouseY\n    });\n\n    if (!this.state.isPenDown) {\n      this.setState({\n        prevX: e.clientX,\n        prevY: e.clientY\n      });\n    }\n\n    this.socket.emit('cursor', {\n      x: this.state.mouseX,\n      y: this.state.mouseY,\n      partyID: this.state.partyID\n    });\n  }\n\n  handleDisplayMouseDown(e) {\n    this.setState({\n      isPenDown: true\n    });\n  }\n\n  handleDisplayMouseUp(e) {\n    this.setState({\n      isPenDown: false\n    });\n  }\n\n  handleBrushResize(e) {\n    this.setState({\n      brushSize: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '45%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      class: \"list-group-item active\",\n      style: {\n        width: 'auto'\n      },\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, this.state.time), React.createElement(\"canvas\", {\n      className: \"display\",\n      width: \"450\",\n      height: \"450\",\n      ref: this.display,\n      style: {\n        border: \"1px solid black\"\n      },\n      onMouseMove: this.handleDisplayMouseMove.bind(this),\n      onMouseDown: this.handleDisplayMouseDown.bind(this),\n      onMouseUp: this.handleDisplayMouseUp.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"toolbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(ChromePicker, {\n      color: this.state.brushColor,\n      onChangeComplete: this.handleColorChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Eraser\",\n      currentTool: this.state.toolId,\n      toolId: \"eraser\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(Tool, {\n      name: \"Pen\",\n      currentTool: this.state.toolId,\n      toolId: \"pen\",\n      onSelect: this.handleToolClick.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }), React.createElement(\"code\", {\n      className: \"brush-size-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, \"Size (\", String(this.state.brushSize), \")\"), React.createElement(\"input\", {\n      onChange: this.handleBrushResize.bind(this),\n      value: this.state.brushSize,\n      type: \"range\",\n      min: \"1\",\n      max: \"50\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"brush-size-indicator\",\n      style: {\n        width: this.state.brushSize + 'px',\n        height: this.state.brushSize + 'px',\n        bachground: this.state.brushColor\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    })) : '')), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '0px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      id: \"messageContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    })), !this.state.isDrawing ? React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(MessageBox, {\n      onSendMessage: message => {\n        this.sendMessage({\n          message\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    })) : ''), React.createElement(\"div\", {\n      className: \"column\",\n      style: {\n        width: '25%',\n        paddingLeft: '70px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(PlayerList, {\n      playerList: this.state.players,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }))), React.createElement(Rodal, {\n      visible: this.state.isPaused,\n      showCloseButton: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"TESTTESTTESTTEST\"));\n  }\n\n} //import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */","map":{"version":3,"sources":["/home/benoit/Documents/Lab/pictionnary crash_test/pictionary_front/src/components/Ingame/Ingame.js"],"names":["React","Component","ChromePicker","socketIOClient","Tool","MessageBox","Messages","PlayerList","Rodal","ioAdress","Ingame","constructor","props","sendMessage","message","socket","emit","token","state","partyID","messages","players","display","createRef","time","isDrawing","isPaused","brushColor","r","g","b","a","brushSize","toolId","isPenDown","mouseX","mouseY","prevX","prevY","cursors","name","localStorage","getItem","componentDidMount","on","playerList","console","log","setState","data","timer","lineCoordinates","x1","y1","x2","y2","displayCtx","current","getContext","lineWidth","lineCap","strokeStyle","lineColor","beginPath","moveTo","lineTo","stroke","loaded","setInterval","Math","round","handleNameInput","e","target","value","handleToolClick","handleColorChange","color","rgb","handleUpdatePlayers","preventDefault","handleDisplayMouseMove","clientX","clientY","getBoundingClientRect","top","left","x","y","handleDisplayMouseDown","handleDisplayMouseUp","handleBrushResize","render","width","border","bind","String","height","bachground","paddingLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {ChromePicker} from 'react-color';\nimport socketIOClient from 'socket.io-client';\nimport Tool from './Tool';\nimport MessageBox from './MessageBox/MessageBox';\nimport Messages from './Messages/Messages';\nimport PlayerList from './PlayerList/PlayerList';\nimport Rodal from 'rodal';\n\n\n\nimport 'rodal/lib/rodal.css';\n\nconst ioAdress = 'http://localhost:7001';\n\nexport default class Ingame extends Component {\n    constructor(props) {\n        super(props);\n        const messages = [];\n        const players = [];\n\n        this.display = React.createRef();\n        this.socket = null;\n        this.state = {\n            //game data\n            time: 90,\n            isDrawing: false,\n            isPaused: false,\n            //For messaging\n            messages,\n            //For players\n            players,\n            //For Drawing\n            brushColor : {r:0, g:0, b:0, a:255},\n            brushSize : 3,\n            toolId: 'pen',\n            isPenDown: false,\n            mouseX: 0,\n            mouseY: 0,\n            prevX: 0,\n            prevY: 0,\n            cursors: [],\n            name: '',\n            partyID: localStorage.getItem('partyID'),\n            token: localStorage.getItem('token')\n        }\n    }\n\n    componentDidMount(){\n        // SocketIo communication init\n        this.socket = socketIOClient(ioAdress);\n\n        this.socket.on(\"playerList\", (playerList)=> {\n            console.log(playerList)\n            this.setState({players: playerList})\n        });\n\n        this.socket.emit('new-user', {token: this.state.token, partyID: this.state.partyID})\n\n        this.socket.on(\"newChatMessage\", ({ message })=> {\n            this.setState({messages: [message,...this.state.messages]})\n        });\n\n        this.socket.on(\"gamePaused\", data => {\n            this.setState({isPaused: data.isPaused})\n        })\n\n        this.socket.on(\"setDrawwing\", data=> {\n            this.setState({isDrawing: data.isDrawing})\n            console.log(this.state.isDrawing)\n        });\n\n        this.socket.on(\"timerCountdown\", data => {\n            console.log(data.timer)\n            this.setState({time: data.timer})\n        })\n\n        this.socket.on('line', data => {\n\n            const [x1,y1,x2,y2] = data.lineCoordinates;\n\n            const displayCtx = this.display.current.getContext('2d');\n\n            displayCtx.lineWidth = data.lineWidth;\n            displayCtx.lineCap = 'round';\n            displayCtx.strokeStyle = `rgba(${data.lineColor.r},${data.lineColor.g},${data.lineColor.b},${data.lineColor.a})`;\n            displayCtx.beginPath();\n            displayCtx.moveTo(x1,y1);\n            displayCtx.lineTo(x2,y2);\n            displayCtx.stroke();\n            \n        });\n        this.socket.on('cursor', data => {\n            if(this.state.loaded){\n                this.setState({cursors: data});\n            }\n        });\n        setInterval(() => {\n        }, Math.round(1000/60));\n    }\n\n    sendMessage = ({message}) => {\n       this.socket.emit(\"newChatMessage\", {message, token:this.state.token,partyID: this.state.partyID})\n    }\n    \n    handleNameInput(e){\n        this.setState({name: e.target.value});\n    }\n\n    handleToolClick(toolId){\n        this.setState({toolId})\n    }\n\n    handleColorChange(color){\n        this.setState({brushColor: color.rgb});\n    }\n\n    handleUpdatePlayers(e){\n        e.preventDefault()\n        this.socket.emit('getPlayerList', {partyID: this.state.partyID})\n    }\n\n    handleDisplayMouseMove(e){\n        this.setState({\n            mouseX: e.clientX,\n            mouseY: e.clientY\n        });\n        if(this.state.isPenDown){\n            this.display.current.getContext('2d').lineCap = 'round';\n            const {top, left} = this.display.current.getBoundingClientRect();\n            switch(this.state.toolId){\n                case 'pen':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: this.state.brushColor,\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n                case 'eraser':\n                    this.socket.emit('line', {\n                        lineWidth: this.state.brushSize,\n                        lineColor: {r: 255, g:255, b:255, a: this.state.brushColor.a},\n                        lineCoordinates: [this.state.prevX-left, this.state.prevY-top, this.state.mouseX - left, this.state.mouseY - top],\n                        partyID: this.state.partyID\n                    });\n                    break;\n            }\n        }\n        this.setState({\n            prevX: this.state.mouseX,\n            prevY: this.state.mouseY\n        });\n        if(!this.state.isPenDown){\n            this.setState({\n                prevX: e.clientX,\n                prevY: e.clientY\n            })\n        }\n        this.socket.emit('cursor', {\n            x: this.state.mouseX,\n            y: this.state.mouseY,\n            partyID: this.state.partyID\n        });\n    }\n\n    handleDisplayMouseDown(e){\n        this.setState({isPenDown: true});\n    }\n\n    handleDisplayMouseUp(e){\n        this.setState({isPenDown: false});\n    }\n\n    handleBrushResize(e){\n        this.setState({brushSize: e.target.value})\n    }\n\n    \n    render() {\n        return (\n            <div>            \n            <div className=\"row\">\n            <div className=\"column\" style={{width: '45%'}}>\n                <div>\n                <button type=\"button\" class=\"list-group-item active\" style={{width: 'auto'}}disabled>\n                    {this.state.time}\n                </button>\n                    <canvas \n                    className='display' \n                    width='450' \n                    height='450' \n                    ref={this.display}\n                    style = {{border: \"1px solid black\"}}\n                    onMouseMove={this.handleDisplayMouseMove.bind(this)}\n                    onMouseDown={this.handleDisplayMouseDown.bind(this)}\n                    onMouseUp={this.handleDisplayMouseUp.bind(this)}></canvas>\n                    {this.state.isDrawing ? <div className=\"toolbox\">\n                        <ChromePicker \n                            color={this.state.brushColor} \n                            onChangeComplete={this.handleColorChange.bind(this)}>\n                            </ChromePicker>\n                        <Tool \n                            name=\"Eraser\" \n                            currentTool={this.state.toolId}\n                            toolId=\"eraser\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <Tool \n                            name=\"Pen\" \n                            currentTool={this.state.toolId}\n                            toolId=\"pen\" \n                            onSelect={this.handleToolClick.bind(this)}/>\n                        <code className=\"brush-size-label\">Size ({String(this.state.brushSize)})</code>\n                        <input \n                            onChange={this.handleBrushResize.bind(this)}\n                            value={this.state.brushSize}\n                            type='range'\n                            min='1'\n                            max='50'/>\n                        <span \n                            className=\"brush-size-indicator\" \n                            style={{width: this.state.brushSize + 'px',\n                                    height: this.state.brushSize + 'px',\n                                    bachground: this.state.brushColor}}>\n                            </span>\n                    </div> : ''}\n                </div>\n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '0px'}}>\n                <div className=\"row\" id='messageContainer'>\n                <Messages messages = {this.state.messages} />\n                </div>\n                {!this.state.isDrawing ? <div className=\"row\">\n                <MessageBox onSendMessage={ message => {\n                    this.sendMessage({message});\n                }}/>\n                </div> :''}\n            \n            </div>\n            <div className=\"column\" style={{width: '25%', paddingLeft: '70px'}}>\n                <PlayerList playerList={this.state.players} />\n            </div>\n            </div>\n            <Rodal visible={this.state.isPaused} showCloseButton={false}>\n                TESTTESTTESTTEST\n            </Rodal>\n            </div>\n        )\n    }\n}\n\n\n\n\n\n\n\n//import \"./Ingame.css\"\n//import MessageBox from './MessageBox/MessageBox'\n//import Messages from './Messages/Messages'\n//import PlayerList from './PlayerList/PlayerList'\n//import useGame from './_useGame'\n\n\n\n/* const Chat = () => {\n    const {messages, sendMessage, players, DrawingData} = useGame();\n    \n    \n    var data =  {\n        context: {},\n        DrawingData: DrawingData\n    }\n\n    \n    data.context = document.getElementById(\"gameCanvas\").game.getContext(\"2D\")\n\n    console.log(data.context)\n    return (\n        <div className=\"row\">\n        <div className=\"column left\">\n            <div className=\"row\">\n            <canvas \n                id = \"gameCanvas\"\n                width=\"500\" \n                height = \"500\"s\n                style = {{border: \"1px solid black\"}}/>\n            <p>\n                <input type=\"range\" min=\"1\" max=\"10\" className=\"custom-range\" id=\"lineWidth\"/>\n                <button className=\"btn btn-primary\">Clear</button>\n                <input type=\"color\" id=\"lineColor\"/>\n            </p>\n            </div>\n            <button className=\"btn btn-primary\" onClick={() => window.location = '/dashboard/'}>Leave</button>\n        </div>\n        <div className=\"column middle\">\n            <div className=\"row\" id='messageContainer'>\n            <Messages messages = {messages} />\n            </div>\n            <div className=\"row\">\n            <MessageBox onSendMessage={ message => {\n                sendMessage({message});\n            }}/>\n            </div>\n        </div>\n        <div className=\"column right\">\n            <PlayerList playerList={players} />\n        </div>\n        </div>\n    );\n}\n\nexport default Chat; */"]},"metadata":{},"sourceType":"module"}